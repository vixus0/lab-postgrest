version: '3'

volumes:
  pgdata: {}
  traefik: {}

services:
  traefik:
    image: traefik
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.rule: Host(`traefik.127-0-0-1.nip.io`)
      traefik.http.routers.traefik.entrypoints: http
      traefik.http.routers.traefik.service: api@internal
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "--api"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.http=true"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https=false"
      - "--entrypoints.https.address=:443"
      - "--log=true"
      - "--log.level=DEBUG"

  db:
    image: postgres
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./setup.sql:/docker-entrypoint-initdb.d/setup.sql

  api:
    image: postgrest/postgrest
    environment:
      PGRST_DB_URI: postgres://authenticator:authenticator@db:5432/test
      PGRST_DB_SCHEMAS: api
      PGRST_DB_ANON_ROLE: api_anon
      PGRST_OPENAPI_SERVER_PROXY_URI: http://api.127-0-0-1.nip.io/
      PGRST_OPENAPI_SECURITY_ACTIVE: "true"
      PGRST_JWT_AUD: postgrest
      PGRST_JWT_SECRET: "@/opt/secret.b64"
      PGRST_JWT_SECRET_IS_BASE64: "true"
      PGRST_LOG_LEVEL: info
    labels:
      traefik.enable: "true"
      traefik.http.routers.api.rule: Host(`api.127-0-0-1.nip.io`)
      traefik.http.routers.api.entrypoints: http
    expose:
      - "3000"
    volumes:
      - ./secret.b64:/opt/secret.b64
    depends_on:
      - db

  swagger:
    image: swaggerapi/swagger-ui
    environment:
      SWAGGER_JSON_URL: http://api.127-0-0-1.nip.io/
    labels:
      traefik.enable: "true"
      traefik.http.routers.swagger.rule: Host(`swagger.127-0-0-1.nip.io`)
      traefik.http.routers.swagger.entrypoints: http
      traefik.http.services.swagger.loadbalancer.server.port: "8080"
    expose:
      - "8080"
    depends_on:
      - api
